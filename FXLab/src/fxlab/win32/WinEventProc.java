/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fxlab.win32;

import com.sun.jna.platform.win32.WinDef;
import com.sun.jna.platform.win32.WinNT;
import com.sun.jna.win32.StdCallLibrary;

/**
 * An application-defined callback (or hook) function that the system calls in response to events generated by an accessible object. 
 * The hook function processes the event notifications as required. 
 * Clients install the hook function and request specific types of event notifications by calling {@code SetWinEventHook}.
 *
 * Within the hook function, the parameters hwnd, idObject, and idChild are used when calling AccessibleObjectFromEvent.
 * Servers generate events by calling NotifyWinEvent.
 * Create multiple callback functions to handle different events.
 * 
 * @author srey
 */
public interface WinEventProc extends StdCallLibrary.StdCallCallback {
    /**
     * An application-defined callback (or hook) function that the system calls in response to events generated by an accessible object. 
     * 
     * @param hWinEventHook
     *          Handle to an event hook function. This value is returned by {@code SetWinEventHook}
     *          when the hook function is installed and is specific to each instance of the hook function.
     * 
     * @param event
     *          Specifies the event that occurred. This value is one of the event constants.
     * 
     * @param hwnd
     *          Handle to the window that generates the event, or NULL if no window is associated with the event. 
     *          For example, the mouse pointer is not associated with a window.
     * 
     * @param idObject
     *          Identifies the object associated with the event. This is one of the object identifiers or a custom object ID.
     * 
     * @param idChild
     *          Identifies whether the event was triggered by an object or a child element of the object. 
     *          If this value is CHILDID_SELF, the event was triggered by the object; otherwise, 
     *          this value is the child ID of the element that triggered the event.
     * 
     * @param dwEventThread
     *          Identifies the thread that generated the event, or the thread that owns the current window.
     * 
     * @param dwmsEventTime 
     *          Specifies the time, in milliseconds, that the event was generated.
     */
    public void callback(WinNT.HANDLE hWinEventHook, int event, WinDef.HWND hwnd, int idObject, 
            int idChild, int dwEventThread, int dwmsEventTime);
}
