/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fxlab.win32.enu;

import fxlab.win32.WinEventProc;
import java.util.stream.Stream;

/**
 * This Enum contains some of the events that are generated by the operating system and by 
 * server applications.
 * 
 * @author srey
 */
public enum EventConstants {
    /**
     * The lowest possible event value
     */
    EVENT_MIN(0x00000001),
    
    /**
     * The highest possible event value
     */
    EVENT_MAX(0x7FFFFFFF),
    
    /**
     * An object has received the keyboard focus. The system sends this event for the following user interface elements: 
     * <ul>
     *  <li>list-view control</li>
     *  <li>menu bar</li>
     *  <li>pop-up menu</li>
     *  <li>switch window</li>
     *  <li>tab control</li>
     *  <li>tree view control</li>
     *  <li>window object</li>
     * </ul>
     * Server applications send this event for their accessible objects.
     * The hwnd parameter of the WinEventProc callback function identifies the window that receives the keyboard focus.
     */
    EVENT_OBJECT_FOCUS(0x8005),
    
    /**
     * An object has been invoked; for example, the user has clicked a button. 
     * This event is supported by common controls and is used by UI Automation.
     * For this event, the hwnd, ID, and idChild parameters of the {@link WinEventProc} callback function identify the item that is invoked.
     */
    EVENT_OBJECT_INVOKED(0x8013),
    
    /**
     * An object's state has changed. The system sends this event for the following user interface elements: 
     * <ul>
     *  <li>check box</li>
     *  <li>combo box</li>
     *  <li>header control</li>
     *  <li>push button</li>
     *  <li>radio button</li>
     *  <li>scroll bar</li>
     *  <li>toolbar control</li>
     *  <li>tree view control</li>
     *  <li>up-down control</li>
     *  <li>window object</li>
     * </ul>
     * Server applications send this event for their accessible objects.
     * For example, a state change occurs when a button object is clicked or released, or when an object is enabled or disabled.
     * For this event notification, the idChild parameter of the {@link WinEventProc} callback function identifies the child object whose state has changed.
     */
    EVENT_OBJECT_STATECHANGE(0x800A),
    
    /**
     * The conversion target within an IME composition has changed. 
     * The conversion target is the subset of the IME composition which is actively selected as the target for user-initiated conversions.
     */
    EVENT_OBJECT_TEXTEDIT_CONVERSIONTARGETCHANGED(0x8030),
    
    /**
     * An object's text selection has changed. This event is supported by common controls and is used by UI Automation.
     * The hwnd, ID, and idChild parameters of the {@link WinEventProc} callback function describe the item that is contained in the updated text selection.
     */
    EVENT_OBJECT_TEXTSELECTIONCHANGED(0x8014),
    
    /**
     * An object's Value property has changed. 
     * The system sends this event for the user interface elements that include the scroll bar and the following controls: 
     * <ul>
     *  <li>edit</li>
     *  <li>header</li>
     *  <li>hot key</li>
     *  <li>progress bar</li>
     *  <li>slider</li>
     *  <li>up-down</li>
     * </ul>
     * Server applications send this event for their accessible objects.
     */
    EVENT_OBJECT_VALUECHANGE(0x800E),
    
    /**
     * The foreground window has changed. 
     * The system sends this event even if the foreground window has changed to another window in the same thread. 
     * Server applications never send this event.
     * For this event, the WinEventProc callback function's hwnd parameter is the handle to the window that is in the foreground, 
     * the idObject parameter is OBJID_WINDOW, and the idChild parameter is CHILDID_SELF.
     */
    EVENT_SYSTEM_FOREGROUND(0x0003),
    
    /**
     * The selection within a container object has changed. The system sends this event for the following user interface elements: 
     * <ul>
     *  <li>list-view control</li>
     *  <li>tab control</li>
     *  <li>tree view control</li>
     *  <li>window object</li>
     * </ul>
     * Server applications send this event for their accessible objects.
     * 
     * This event signals a single selection: either a child is selected in a container that previously did not contain any selected children, 
     * or the selection has changed from one child to another
     * 
     * The hwnd and idObject parameters of the {@link WinEventProc} callback function describe the container; 
     * the idChild parameter identifies the object that is selected. If the selected child is a window that also contains objects, 
     * the idChild parameter is OBJID_WINDOW.
     */
    EVENT_OBJECT_SELECTION(0x8006),
    
    /**
     * Convenient enum to refer null option or the constant in not valid.
     */
    NULL(-1);
    
    private final int value;

    private EventConstants(int value) {
        this.value = value;
    }

    public int getValue() {
        return value;
    }
    
    public static EventConstants fromInt(int value) {
        return Stream.<EventConstants>of(EventConstants.values()).
                filter(ec -> ec.value == value).
                findFirst().
                orElse(NULL);
    }
}
